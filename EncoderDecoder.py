def generate_mapping():
    mapping = [
        ("00000000", "aA"),
        ("00000001", "aB"),
        ("00000010", "aC"),
        ("00000011", "aD"),
        ("00000100", "aE"),
        ("00000101", "aF"),
        ("00000110", "aG"),
        ("00000111", "aH"),
        ("00001000", "aI"),
        ("00001001", "aJ"),
        ("00001010", "aK"),
        ("00001011", "aL"),
        ("00001100", "aM"),
        ("00001101", "aN"),
        ("00001110", "aO"),
        ("00001111", "aP"),
        ("00010000", "bA"),
        ("00010001", "bB"),
        ("00010010", "bC"),
        ("00010011", "bD"),
        ("00010100", "bE"),
        ("00010101", "bF"),
        ("00010110", "bG"),
        ("00010111", "bH"),
        ("00011000", "bI"),
        ("00011001", "bJ"),
        ("00011010", "bK"),
        ("00011011", "bL"),
        ("00011100", "bM"),
        ("00011101", "bN"),
        ("00011110", "bO"),
        ("00011111", "bP"),
        ("00100000", "cA"),
        ("00100001", "cB"),
        ("00100010", "cC"),
        ("00100011", "cD"),
        ("00100100", "cE"),
        ("00100101", "cF"),
        ("00100110", "cG"),
        ("00100111", "cH"),
        ("00101000", "cI"),
        ("00101001", "cJ"),
        ("00101010", "cK"),
        ("00101011", "cL"),
        ("00101100", "cM"),
        ("00101101", "cN"),
        ("00101110", "cO"),
        ("00101111", "cP"),
        ("00110000", "dA"),
        ("00110001", "dB"),
        ("00110010", "dC"),
        ("00110011", "dD"),
        ("00110100", "dE"),
        ("00110101", "dF"),
        ("00110110", "dG"),
        ("00110111", "dH"),
        ("00111000", "dI"),
        ("00111001", "dJ"),
        ("00111010", "dK"),
        ("00111011", "dL"),
        ("00111100", "dM"),
        ("00111101", "dN"),
        ("00111110", "dO"),
        ("00111111", "dP"),
        ("01000000", "eA"),
        ("01000001", "eB"),
        ("01000010", "eC"),
        ("01000011", "eD"),
        ("01000100", "eE"),
        ("01000101", "eF"),
        ("01000110", "eG"),
        ("01000111", "eH"),
        ("01001000", "eI"),
        ("01001001", "eJ"),
        ("01001010", "eK"),
        ("01001011", "eL"),
        ("01001100", "eM"),
        ("01001101", "eN"),
        ("01001110", "eO"),
        ("01001111", "eP"),
        ("01010000", "fA"),
        ("01010001", "fB"),
        ("01010010", "fC"),
        ("01010011", "fD"),
        ("01010100", "fE"),
        ("01010101", "fF"),
        ("01010110", "fG"),
        ("01010111", "fH"),
        ("01011000", "fI"),
        ("01011001", "fJ"),
        ("01011010", "fK"),
        ("01011011", "fL"),
        ("01011100", "fM"),
        ("01011101", "fN"),
        ("01011110", "fO"),
        ("01011111", "fP"),
        ("01100000", "gA"),
        ("01100001", "gB"),
        ("01100010", "gC"),
        ("01100011", "gD"),
        ("01100100", "gE"),
        ("01100101", "gF"),
        ("01100110", "gG"),
        ("01100111", "gH"),
        ("01101000", "gI"),
        ("01101001", "gJ"),
        ("01101010", "gK"),
        ("01101011", "gL"),
        ("01101100", "gM"),
        ("01101101", "gN"),
        ("01101110", "gO"),
        ("01101111", "gP"),
        ("01110000", "hA"),
        ("01110001", "hB"),
        ("01110010", "hC"),
        ("01110011", "hD"),
        ("01110100", "hE"),
        ("01110101", "hF"),
        ("01110110", "hG"),
        ("01110111", "hH"),
        ("01111000", "hI"),
        ("01111001", "hJ"),
        ("01111010", "hK"),
        ("01111011", "hL"),
        ("01111100", "hM"),
        ("01111101", "hN"),
        ("01111110", "hO"),
        ("01111111", "hP"),
        ("10000000", "iA"),
        ("10000001", "iB"),
        ("10000010", "iC"),
        ("10000011", "iD"),
        ("10000100", "iE"),
        ("10000101", "iF"),
        ("10000110", "iG"),
        ("10000111", "iH"),
        ("10001000", "iI"),
        ("10001001", "iJ"),
        ("10001010", "iK"),
        ("10001011", "iL"),
        ("10001100", "iM"),
        ("10001101", "iN"),
        ("10001110", "iO"),
        ("10001111", "iP"),
        ("10010000", "jA"),
        ("10010001", "jB"),
        ("10010010", "jC"),
        ("10010011", "jD"),
        ("10010100", "jE"),
        ("10010101", "jF"),
        ("10010110", "jG"),
        ("10010111", "jH"),
        ("10011000", "jI"),
        ("10011001", "jJ"),
        ("10011010", "jK"),
        ("10011011", "jL"),
        ("10011100", "jM"),
        ("10011101", "jN"),
        ("10011110", "jO"),
        ("10011111", "jP"),
        ("10100000", "kA"),
        ("10100001", "kB"),
        ("10100010", "kC"),
        ("10100011", "kD"),
        ("10100100", "kE"),
        ("10100101", "kF"),
        ("10100110", "kG"),
        ("10100111", "kH"),
        ("10101000", "kI"),
        ("10101001", "kJ"),
        ("10101010", "kK"),
        ("10101011", "kL"),
        ("10101100", "kM"),
        ("10101101", "kN"),
        ("10101110", "kO"),
        ("10101111", "kP"),
        ("10110000", "lA"),
        ("10110001", "lB"),
        ("10110010", "lC"),
        ("10110011", "lD"),
        ("10110100", "lE"),
        ("10110101", "lF"),
        ("10110110", "lG"),
        ("10110111", "lH"),
        ("10111000", "lI"),
        ("10111001", "lJ"),
        ("10111010", "lK"),
        ("10111011", "lL"),
        ("10111100", "lM"),
        ("10111101", "lN"),
        ("10111110", "lO"),
        ("10111111", "lP"),
        ("11000000", "mA"),
        ("11000001", "mB"),
        ("11000010", "mC"),
        ("11000011", "mD"),
        ("11000100", "mE"),
        ("11000101", "mF"),
        ("11000110", "mG"),
        ("11000111", "mH"),
        ("11001000", "mI"),
        ("11001001", "mJ"),
        ("11001010", "mK"),
        ("11001011", "mL"),
        ("11001100", "mM"),
        ("11001101", "mN"),
        ("11001110", "mO"),
        ("11001111", "mP"),
        ("11010000", "nA"),
        ("11010001", "nB"),
        ("11010010", "nC"),
        ("11010011", "nD"),
        ("11010100", "nE"),
        ("11010101", "nF"),
        ("11010110", "nG"),
        ("11010111", "nH"),
        ("11011000", "nI"),
        ("11011001", "nJ"),
        ("11011010", "nK"),
        ("11011011", "nL"),
        ("11011100", "nM"),
        ("11011101", "nN"),
        ("11011110", "nO"),
        ("11011111", "nP"),
        ("11100000", "oA"),
        ("11100001", "oB"),
        ("11100010", "oC"),
        ("11100011", "oD"),
        ("11100100", "oE"),
        ("11100101", "oF"),
        ("11100110", "oG"),
        ("11100111", "oH"),
        ("11101000", "oI"),
        ("11101001", "oJ"),
        ("11101010", "oK"),
        ("11101011", "oL"),
        ("11101100", "oM"),
        ("11101101", "oN"),
        ("11101110", "oO"),
        ("11101111", "oP"),
        ("11110000", "pA"),
        ("11110001", "pB"),
        ("11110010", "pC"),
        ("11110011", "pD"),
        ("11110100", "pE"),
        ("11110101", "pF"),
        ("11110110", "pG"),
        ("11110111", "pH"),
        ("11111000", "pI"),
        ("11111001", "pJ"),
        ("11111010", "pK"),
        ("11111011", "pL"),
        ("11111100", "pM"),
        ("11111101", "pN"),
        ("11111110", "pO"),
        ("11111111", "pP"),
    ]
    return mapping

def binary_to_key(binary):
    binary_to_key_mapping = generate_mapping()
    for bin_num, key in binary_to_key_mapping:
        if bin_num == binary:
            return key
    return None

def key_to_binary(key):
    key_to_binary_mapping = {key: binary for binary, key in generate_mapping()}
    return key_to_binary_mapping.get(key, None)

def GetKey(binary="10010101"):
    binary_input = str(binary)
    corresponding_key = binary_to_key(binary_input)
    return corresponding_key

def GetBinary(key="aA"):
    corresponding_binary = key_to_binary(key)
    return corresponding_binary
